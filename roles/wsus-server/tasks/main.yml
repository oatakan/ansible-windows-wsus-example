---

- block:
    - name: Ensure required DSC module is available
      community.windows.win_psmodule:
        name: UpdateServicesDsc
        state: present
  rescue:
    - name: Install Latest Version of PowershellGet
      ansible.windows.win_shell: |
        $ErrorActionPreference = 'Stop'
        Install-Module -Name 'PowerShellGet' -Repository 'PSGallery' -Scope 'AllUsers' -AllowClobber -Force -Confirm:$false

    - name: Ensure required DSC module is available (retry)
      community.windows.win_psmodule:
        name: UpdateServicesDsc
        state: present

# See PR: https://github.com/dsccommunity/UpdateServicesDsc/pull/64
# this is temporary until the PR is merged
- block:
    - name: Patch for handling of product names (1/2)
      win_get_url:
        url: https://github.com/MartinVokurek/UpdateServicesDsc/raw/Fix-Products/source/DSCResources/MSFT_UpdateServicesServer/MSFT_UpdateServicesServer.psm1
        dest: C:\Program Files\WindowsPowerShell\Modules\UpdateServicesDsc\1.2.1\DSCResources\MSFT_UpdateServicesServer\MSFT_UpdateServicesServer.psm1

    - name: Patch for handling of product names (2/2)
      win_get_url:
        url: https://raw.githubusercontent.com/MartinVokurek/UpdateServicesDsc/Fix-Products/source/DSCResources/MSFT_UpdateServicesApprovalRule/MSFT_UpdateServicesApprovalRule.psm1
        dest: C:\Program Files\WindowsPowerShell\Modules\UpdateServicesDsc\1.2.1\DSCResources\MSFT_UpdateServicesApprovalRule\MSFT_UpdateServicesApprovalRule.psm1

- name: Install required WSUS server features
  win_dsc:
    resource_name: windowsfeature
    Name: "{{ item }}"
  loop:
    - UpdateServices
    - UpdateServices-WidDB
    - UpdateServices-Services
    - UpdateServices-RSAT
    - UpdateServices-API

- name: Ensure Content directory exists
  win_file:
    path: '{{ wsus_content_dir }}'
    state: directory

- name: Ensure WSUS server is deployed
  win_dsc:
    resource_name: UpdateServicesServer
    Ensure: Present
    ContentDir: '{{ wsus_content_dir }}'
    Languages: en
    Products: "{{ wsus_products }}"
    Classifications:
      - "{{ wsus_category_names['CriticalUpdates'].id }}"
      - "{{ wsus_category_names['DefinitionUpdates'].id }}"
      - "{{ wsus_category_names['SecurityUpdates'].id }}"
      - "{{ wsus_category_names['ServicePacks'].id }}"
      - "{{ wsus_category_names['UpdateRollups'].id }}"
      - "{{ wsus_category_names['Updates'].id }}"
    UpstreamServerName: "{{ wsus_upstream_server_name | default(omit) }}"
    UpstreamServerPort: "{{ wsus_upstream_server_port | default(omit) }}"
    UpstreamServerSSL: "{{ wsus_upstream_server_ssl | default(omit) }}"
    Synchronize: True
    SynchronizeAutomatically: True
    SynchronizeAutomaticallyTimeOfDay: '01:30:00'
    ClientTargetingMode: "{{ wsus_client_targeting_mode }}"

- name: Apply approval rules
  win_dsc:
    resource_name: UpdateServicesApprovalRule
    Name: "{{ wsus_category_names[item].name }}"
    Classifications: "{{ wsus_category_names[item].id }}"
    Enabled: True
    RunRuleNow: True
  loop:
    - CriticalUpdates
    - DefinitionUpdates
    - SecurityUpdates
    - ServicePacks
    - UpdateRollups
    - Updates

- name: Clean up updates
  win_dsc:
    resource_name: UpdateServicesCleanup
    Ensure: Present
    DeclineExpiredUpdates: True
    DeclineSupersededUpdates: True
    CleanupObsoleteUpdates: True
    CleanupUnneededContentFiles: True